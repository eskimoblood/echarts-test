{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getOption","selectedRow","animation","xAxis","type","data","yAxis","series","map","value","i","includes","itemStyle","color","graphic","elements","shape","width","height","style","fill","onEvents","update","setStartOffsetX","startOffsetX","echarts","mousedown","offsetX","event","mouseup","dataIndex","componentSubType","getValue","without","shiftKey","isEmpty","range","uniq","concat","last","mousemove","buttons","start","end","current","getEchartsInstance","convertFromPixel","seriesIndex","App","useState","useRef","options","ref","option","filter","_","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAKMA,G,OAAY,SAAAC,GAAW,MAAK,CAC9BC,WAAW,EACXC,MAAO,CACHC,KAAM,WACNC,KAAM,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAErDC,MAAO,CACHF,KAAM,SAEVG,OAAQ,CACJ,CACIF,KAAM,CAAC,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,KAAKG,KAAI,SAACC,EAAOC,GAAR,OACxCT,EAAYU,SAASD,GACf,CAAED,QAAOG,UAAW,CAAEC,MAAO,UAC7BJ,KAEVL,KAAM,QAGdU,QAAS,CACLC,SAAU,CACN,CACIX,KAAM,OACNY,MAAO,CAAEC,MAAO,IAAKC,OAAQ,KAC7BC,MAAO,CACHC,KAAM,eAOpBC,EAAW,SAAC,GAAD,IACbC,EADa,EACbA,OACArB,EAFa,EAEbA,YACAsB,EAHa,EAGbA,gBACAC,EAJa,EAIbA,aACAC,EALa,EAKbA,QALa,MAMV,CACHC,UAAW,gBAAYC,EAAZ,EAAGC,MAASD,QAAZ,OAA4BJ,EAAgBI,IACvDE,QAAS,YAAsD,IAAnDC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,iBAAkBH,EAAqB,EAArBA,MAAqB,wDAC1DL,EAAgB,MACS,QAArBQ,GACAT,EAAO,IAEPU,EAASP,EAASD,KAAkBM,GACpCR,EACIrB,EAAYU,SAASmB,GACfG,kBAAQhC,EAAa6B,GACrBF,EAAMA,MAAMM,SACZC,kBAAQlC,GACJmC,gBAAM,EAAGN,EAAY,GACrBO,eACIpC,EAAYqC,OACRF,gBAAMG,eAAKtC,GAAc6B,EAAY,KAGjD7B,EAAYqC,OAAOR,KAIrCU,UAAW,YAKJ,IAAD,IAJFZ,MACID,EAGF,EAHEA,QAIJ,GAAgB,IADd,EAFEC,MAASa,QAGM,CACf,IAAMC,EAAQV,EAASP,EAASD,GAC1BmB,EAAMX,EAASP,EAASE,GAC9BL,EAAOc,gBAAMM,EAAOC,GAAOD,EAAQC,GAAO,EAAI,SAIpDX,EAAW,SAACP,EAASE,GAEvB,OADiBF,EAAQmB,QAAQC,qBACjBC,iBAAiB,CAAEC,YAAa,GAAK,CAACpB,EAAS,IAAI,IAmCxDqB,MAhCf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACJhD,EADI,KACSqB,EADT,OAE6B2B,qBAF7B,mBAEJzB,EAFI,KAEUD,EAFV,KAGLE,EAAUyB,iBAAO,MACjBC,EAAUnD,EAAUC,EAAasB,GAEvC,OACI,6BACI,kBAAC,IAAD,CACI6B,IAAK3B,EACL4B,OAAQF,EACRhC,MAAO,CAAED,OAAQ,SACjBG,SAAUA,EAAS,CACfC,SACArB,cACAsB,kBACAC,eACAC,cAGR,4BACI,wCACA,4BACK0B,EAAQhD,MAAME,KACViD,QAAO,SAACC,EAAG7C,GAAJ,OAAUT,EAAYU,SAASD,MACtC8C,KAAK,SCjGVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c8a473f4.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react'\nimport { without, isEmpty, range, last, uniq, get } from 'lodash'\nimport ReactEcharts from 'echarts-for-react'\nimport './App.css'\n\nconst getOption = selectedRow => ({\n    animation: false,\n    xAxis: {\n        type: 'category',\n        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    },\n    yAxis: {\n        type: 'value',\n    },\n    series: [\n        {\n            data: [120, 200, 150, 80, 70, 110, 130].map((value, i) =>\n                selectedRow.includes(i)\n                    ? { value, itemStyle: { color: 'green' } }\n                    : value\n            ),\n            type: 'bar',\n        },\n    ],\n    graphic: {\n        elements: [\n            {\n                type: 'rect',\n                shape: { width: 800, height: 300 },\n                style: {\n                    fill: 'white',\n                },\n            },\n        ],\n    },\n})\n\nconst onEvents = ({\n    update,\n    selectedRow,\n    setStartOffsetX,\n    startOffsetX,\n    echarts,\n}) => ({\n    mousedown: ({ event: { offsetX } }) => setStartOffsetX(offsetX),\n    mouseup: ({ dataIndex, componentSubType, event, ...rest }) => {\n        setStartOffsetX(null)\n        if (componentSubType !== 'bar') {\n            update([])\n        }\n        if (getValue(echarts, startOffsetX) === dataIndex) {\n            update(\n                selectedRow.includes(dataIndex)\n                    ? without(selectedRow, dataIndex)\n                    : event.event.shiftKey\n                    ? isEmpty(selectedRow)\n                        ? range(0, dataIndex + 1)\n                        : uniq(\n                              selectedRow.concat(\n                                  range(last(selectedRow), dataIndex + 1)\n                              )\n                          )\n                    : selectedRow.concat(dataIndex)\n            )\n        }\n    },\n    mousemove: ({\n        event: {\n            offsetX,\n            event: { buttons },\n        },\n    }) => {\n        if (buttons === 1) {\n            const start = getValue(echarts, startOffsetX)\n            const end = getValue(echarts, offsetX)\n            update(range(start, end + (start > end ? -1 : 1)))\n        }\n    },\n})\nconst getValue = (echarts, offsetX) => {\n    const instance = echarts.current.getEchartsInstance()\n    return instance.convertFromPixel({ seriesIndex: 0 }, [offsetX, 0])[0]\n}\n\nfunction App() {\n    const [selectedRow, update] = useState([])\n    const [startOffsetX, setStartOffsetX] = useState()\n    const echarts = useRef(null)\n    const options = getOption(selectedRow, setStartOffsetX)\n\n    return (\n        <div>\n            <ReactEcharts\n                ref={echarts}\n                option={options}\n                style={{ height: '300px' }}\n                onEvents={onEvents({\n                    update,\n                    selectedRow,\n                    setStartOffsetX,\n                    startOffsetX,\n                    echarts,\n                })}\n            />\n            <dl>\n                <dt>Selected</dt>\n                <dd>\n                    {options.xAxis.data\n                        .filter((_, i) => selectedRow.includes(i))\n                        .join(',')}\n                </dd>\n            </dl>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}